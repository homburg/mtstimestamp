package mtstimestamp

import (
	"testing"
	"bytes"
	"time"
)

var mtsBytesWithTimestamp = []byte{0x66, 0x4d, 0x44, 0x50, 0x4d, 0xd, 0x18, 0x4, 0x20, 0x13, 0x7, 0x19, 0x22, 0x16, 0x32, 0x51, 0x70, 0xff, 0x7, 0x1f, 0x28, 0x71, 0xdf, 0x3f, 0xff, 0xff}
var correctTimestamp = time.Date(2013, 07, 22, 16, 32, 51, 0, time.Local)

var mtsBytesWithoutTimestamp = []byte{0x67, 0x4f, 0x42, 0x50, 0x4d, 0xd, 0x18, 0x4, 0x20, 0x13, 0x7, 0x19, 0x22, 0x16, 0x32, 0x51, 0x70, 0xff, 0x7, 0x1f, 0x28, 0x71, 0xdf, 0x3f, 0xff, 0xff}

var mtsBytesWithInvalidTimestamp = []byte{0x66, 0x4d, 0x44, 0x50, 0x4d, 0xd, 0x18, 0x4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x70, 0xff, 0x7, 0x1f, 0x28, 0x71, 0xdf, 0x3f, 0xff, 0xff}

func TestExtract(t *testing.T) {
	file := bytes.NewReader(mtsBytesWithTimestamp)

	ts, err := Extract(file)

	if nil != err {
		t.Error(err)
	}

	if !ts.Equal(correctTimestamp) {
		t.Errorf("Expected time %s, got %s", correctTimestamp, ts)
	}

}

func TestExtractWithoutTimestamp(t *testing.T) {
	file := bytes.NewReader(mtsBytesWithoutTimestamp)

	ts, _ := Extract(file)

	if ts != nil {
		t.Errorf("Did not expect to get valid timestamp, got %s", ts)
	}
}

func TestExtractWithInvalidTimestamp(t *testing.T) {
	file := bytes.NewReader(mtsBytesWithInvalidTimestamp)

	ts, err := Extract(file)

	if ts != nil {
		t.Errorf("Did not expect to get valid timestamp, got %s", ts)
	}

	if nil == err {
		t.Error("Expected error for invalid time.Date args, got nil")
	}
}
